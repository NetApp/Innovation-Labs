apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.main.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ include "netapp-connector.name" . }}
spec:
  selector:
    matchLabels:
      app: {{ include "netapp-connector.name" . }}
  serviceName: {{ .Values.main.name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ include "netapp-connector.name" . }}
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000    
      containers:
        - name: {{ .Values.main.name }}
          image: "{{ .Values.main.image.repository }}:{{ .Values.main.image.tag }}"
          imagePullPolicy: {{ .Values.main.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.main.service.port }}
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: PORT
            - name: PYTHONUNBUFFERED
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: PYTHONUNBUFFERED
            - name: DB_PATH
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: DB_PATH
            - name: HTTPS_PROXY
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: HTTPS_PROXY
            - name: PROXY_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: PROXY_USERNAME
            - name: PROXY_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: PROXY_PASSWORD
            - name: GRAPH_VERIFY_SSL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: GRAPH_VERIFY_SSL
            - name: SSL_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: SSL_CERT_FILE_PATH
            - name: GRAPH_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.main.name }}
                  key: GRAPH_TIMEOUT   
            - name: MS_GRAPH_CONNECTOR_DESCRIPTION
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.main.name }}
                  key: MS_GRAPH_CONNECTOR_DESCRIPTION
            - name: MS_GRAPH_CONNECTOR_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.main.name }}
                  key: MS_GRAPH_CONNECTOR_ID
            - name: MS_GRAPH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.main.name }}
                  key: MS_GRAPH_CLIENT_ID
            - name: MS_GRAPH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.main.name }}
                  key: MS_GRAPH_CLIENT_SECRET
            - name: MS_GRAPH_TENANT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.main.name }}
                  key: MS_GRAPH_TENANT_ID
            - name: NETAPP_CONNECTOR_LICENSE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.main.name }}
                  key: NETAPP_CONNECTOR_LICENSE
          securityContext:
            capabilities:
              add: ["SYS_ADMIN", "DAC_READ_SEARCH", "DAC_OVERRIDE"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: data
              mountPath: {{ .Values.main.persistence.mountPath }}
            {{- if .Values.main.env.SSL_CERT_FILE }}
            - name: ssl-cert
              mountPath: /app/ssl_certs/custom_ca_bundle.pem
              subPath: custom_ca_bundle.pem
            {{- end }}
      volumes:
        {{- if .Values.main.env.SSL_CERT_FILE }}
        - name: ssl-cert
          secret:
            secretName: {{ .Values.main.name }}-ssl-cert
        {{- end }}
      restartPolicy: Always
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ {{ .Values.main.persistence.accessMode }} ]
        resources:
          requests:
            storage: {{ .Values.main.persistence.size }}
